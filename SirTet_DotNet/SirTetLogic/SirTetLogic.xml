<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SirTetLogic</name>
    </assembly>
    <members>
        <member name="T:SirTetLogic.Block">
            <summary>
            The main Block abstract class
            Contains all method for performing Block function
            </summary>
        </member>
        <member name="P:SirTetLogic.Block.MiddlePoint">
            <value>Gets middle point of block</value>
        </member>
        <member name="P:SirTetLogic.Block.RestPoints">
            <value>Gets table contains of rest of points excluding middle point</value>
        </member>
        <member name="P:SirTetLogic.Block.RotationPose">
            <value>Gets index of actual rotation position</value>
        </member>
        <member name="M:SirTetLogic.Block.Fall">
            <summary>
            Method responsible for blocks moving one row lower
            </summary>
        </member>
        <member name="M:SirTetLogic.Block.Move(System.Boolean)">
            <summary>
            Method responsible for moving blocks to left and right
            </summary>
            <param name="toLeft">Bool contains information if key to move left is pressed</param>
        </member>
        <member name="M:SirTetLogic.Block.Rotate">
            <summary>
            Abstract method responsible for rotation of blocks
            </summary>
        </member>
        <member name="M:SirTetLogic.Block.IfTouchHardLayer(System.Boolean[0:,0:])">
            <summary>
            Method responsible for checking if blocks touch hard layer below
            </summary>
            <param name="HardLayer">Two dimensional pool Table that contains of information about state of the block</param>
            <returns>Return information about is the block below used or not</returns>
        </member>
        <member name="M:SirTetLogic.Block.IfBlockOutOfGridOnRotate(System.Int32)">
            <summary>
            Abstract method responsible for checking if the block is out of the grid x after rotation
            </summary>
            <param name="gridX">Number of columns</param>
            <returns>Return information about if the block after rotation is out off the grid x</returns>
        </member>
        <member name="M:SirTetLogic.Block.IfBlockOverrideOnRotate(System.Boolean[0:,0:])">
            <summary>
            Abstract method responsible for checking if the block collide with used space after rotation
            </summary>
            <param name="HardLayer">Two dimensional pool Table that contains of information about state of the block</param>
            <returns>Return information about if the block after rotation collide with used space</returns>
        </member>
        <member name="M:SirTetLogic.Block.IfOutOfGrid(System.Int32,System.Boolean)">
            <summary>
            Method responsible for checking if the block is out of the grid x after moving left or right
            </summary>
            <param name="gridX">Number of columns</param>
            <param name="toLeft">Bool contains information if key to move left is pressed</param>
            <returns>Return information about if the block is out of grid x after moving left or right</returns>
        </member>
        <member name="M:SirTetLogic.Block.IfBlockOverride(System.Boolean[0:,0:],System.Boolean)">
            <summary>
            Method responsible for checking if block collide with used space after moving left or right
            </summary>
            <param name="HardLayer">Two dimensional pool Table that contains of information about state of the block</param>
            <param name="toLeft">Bool contains information if key to move left is pressed</param>
            <returns>Return information about if the block collide with used space after moving left or right</returns>
        </member>
        <member name="M:SirTetLogic.Block.GetBlock">
            <summary>
            Method responsible for getting a table consisting of single points out of the whole block
            </summary>
            <returns></returns>
        </member>
        <member name="P:SirTetLogic.Block.GetRotationPose">
            <summary>
            Method responsible for getting index of used rotation pose
            </summary>
        </member>
        <member name="M:SirTetLogic.Block.GetBlockType">
            <summary>
            Abstract method responsible for getting active block type
            </summary>
            <returns>Return information about the block type</returns>
        </member>
        <member name="T:SirTetLogic.Grid">
            <summary>
            The main Grid class
            Contains all method for performing Grid function
            </summary>
        </member>
        <member name="M:SirTetLogic.Grid.#ctor(System.Windows.Shapes.Rectangle[0:,0:]@,System.Windows.Media.Color,System.Int32,System.Int32)">
            <summary>
            Initialize a new instance of the <see cref="T:SirTetLogic.Grid"/> class
            </summary>
            <param name="RectangleTab">Variable contains reference to two dimensional table contains canvas elements</param>
            <param name="color">Variable contains information about grid color</param>
            <param name="sizeGridX">Number of columns</param>
            <param name="sizeGridY">Number of rows</param>
        </member>
        <member name="M:SirTetLogic.Grid.InitializeHardLayer(System.Windows.Media.Color)">
            <summary>
            Method responsible for making the last row visible as used
            </summary>
            <param name="color">Variable contains information about color</param>
        </member>
        <member name="M:SirTetLogic.Grid.DrawBlock(SirTetLogic.Point[],System.Windows.Media.Color)">
            <summary>
            Method responsible for drawing the block on grid
            </summary>
            <param name="Block">Table that contains informations about points in block</param>
            <param name="color">Variable contains information about grid color</param>
        </member>
        <member name="M:SirTetLogic.Grid.ClearLine(System.Int32,System.Windows.Media.Color)">
            <summary>
            Method responsible for clearing the given line
            </summary>
            <param name="lineToClear">Variable that contains index of row</param>
            <param name="color">Variable contains information about grid color</param>
        </member>
        <member name="M:SirTetLogic.Grid.ClearAllGrid(System.Windows.Media.Color)">
            <summary>
            Method responsible for clearing whole grid
            </summary>
            <param name="color">Variable contains information about grid color</param>
        </member>
        <member name="M:SirTetLogic.Grid.Indurate(SirTetLogic.Point[],System.Int32)">
            <summary>
            Method responsible for acknowledging that given space is used
            </summary>
            <param name="IndurateBlock">Table contains information about block</param>
            <param name="rowToCheck">Variable that contains index of row</param>
            <returns></returns>
        </member>
        <member name="M:SirTetLogic.Grid.LinesToDestroy(SirTetLogic.Point[])">
            <summary>
            List of lines to destroy
            </summary>
            <param name="IndurateBlock">Table contains information about block</param>
            <returns></returns>
        </member>
        <member name="M:SirTetLogic.Grid.RestBlockFall(System.Int32,System.Int32,System.Int32)">
            <summary>
            Method responsible for falling blocks after cleaning line
            </summary>
            <param name="whereStartFall">Number of from which line block should fall</param>
            <param name="fallLenght">Number of how many lines should block fall</param>
            <param name="whereEndFall">Number of to which line should block fall. Default value = 0</param>
        </member>
        <member name="M:SirTetLogic.Grid.IfLineClear(System.Int32,System.Windows.Media.Color)">
            <summary>
            Method responsible for checking is given line clear
            </summary>
            <param name="line">Variable contains information about index of row</param>
            <param name="color">Variable contains information about grid color</param>
            <returns>Return information about if the line cleared</returns>
        </member>
        <member name="P:SirTetLogic.Grid.GetHardLayer">
            <summary>
            Method responsible for getting two dimensional table containing information about used space
            </summary>
        </member>
        <member name="M:SirTetLogic.Grid.IfGameOver(System.Int32,System.Int32)">
            <summary>
            Method responsible for checking if game is over
            </summary>
            <param name="rowToCheck">Variable contains information about index of row</param>
            <param name="xSize">Number of columns</param>
            <returns>Return information about whether game is over or not</returns>
        </member>
        <member name="M:SirTetLogic.Grid.IfLineComplete(System.Int32,System.Int32)">
            <summary>
            Method responsible for checking if line is complete
            </summary>
            <param name="rowToCheck">Variable contains information about index of row</param>
            <param name="xSize">Number of columns</param>
            <returns>Return information about whether line is complete or not</returns>
        </member>
        <member name="T:SirTetLogic.I_Block">
            <summary>
            The main I_Block class
            Contains all method for performing I_Block function
            </summary>
        </member>
        <member name="P:SirTetLogic.I_Block.MiddlePoint">
            <value>Gets middle point of block</value>
        </member>
        <member name="P:SirTetLogic.I_Block.RestPoints">
            <value>Gets table contains of rest of points excluding middle point</value>
        </member>
        <member name="P:SirTetLogic.I_Block.RotationPose">
            <value>Gets index of actual rotation position</value>
        </member>
        <member name="M:SirTetLogic.I_Block.#ctor(System.Int32,System.Int32)">
            <summary>
            Initialize a new instance of the <see cref="T:SirTetLogic.I_Block"/> class
            </summary>
            <param name="middleX">Index of column</param>
            <param name="middleY">Index of row</param>
        </member>
        <member name="M:SirTetLogic.I_Block.Rotate">
            <summary>
            Method responsible for rotation of blocks
            </summary>
        </member>
        <member name="M:SirTetLogic.I_Block.IfBlockOutOfGridOnRotate(System.Int32)">
            <summary>
            Method responsible for checking if the block is out of the grid x after rotation
            </summary>
            <param name="gridX">Index of column</param>
            <returns>Return information about if the block after rotation is out off the grid x</returns>
        </member>
        <member name="M:SirTetLogic.I_Block.IfBlockOverrideOnRotate(System.Boolean[0:,0:])">
            <summary>
            Method responsible for checking if the block collide with used space after rotation
            </summary>
            <param name="HardLayer">Two dimensional pool Table that contains of information about state of the block</param>
            <returns>Return information about if the block after rotation collide with used space</returns>
        </member>
        <member name="M:SirTetLogic.I_Block.GetBlockType">
            <summary>
            Method responsible for getting active block type
            </summary>
            <returns>Return information about the block type</returns>
        </member>
        <member name="T:SirTetLogic.J_Block">
            <summary>
            The main J_Block class
            Contains all method for performing J_Block function
            </summary>
        </member>
        <member name="P:SirTetLogic.J_Block.MiddlePoint">
            <value>Gets middle point of block</value>
        </member>
        <member name="P:SirTetLogic.J_Block.RestPoints">
            <value>Gets table contains of rest of points excluding middle point</value>
        </member>
        <member name="P:SirTetLogic.J_Block.RotationPose">
            <value>Gets index of actual rotation position</value>
        </member>
        <member name="M:SirTetLogic.J_Block.#ctor(System.Int32,System.Int32)">
            <summary>
            Initialize a new instance of the <see cref="T:SirTetLogic.J_Block"/> class
            </summary>
            <param name="middleX">Index of column</param>
            <param name="middleY">Index of row</param>
        </member>
        <member name="M:SirTetLogic.J_Block.Rotate">
            <summary>
            Method responsible for rotation of blocks
            </summary>
        </member>
        <member name="M:SirTetLogic.J_Block.IfBlockOutOfGridOnRotate(System.Int32)">
            <summary>
            Method responsible for checking if the block is out of the grid x after rotation
            </summary>
            <param name="gridX">Index of column</param>
            <returns>Return information about if the block after rotation is out off the grid x</returns>
        </member>
        <member name="M:SirTetLogic.J_Block.IfBlockOverrideOnRotate(System.Boolean[0:,0:])">
            <summary>
            Method responsible for checking if the block collide with used space after rotation
            </summary>
            <param name="HardLayer">Two dimensional pool Table that contains of information about state of the block</param>
            <returns>Return information about if the block after rotation collide with used space</returns>
        </member>
        <member name="M:SirTetLogic.J_Block.GetBlockType">
            <summary>
            Method responsible for getting active block type
            </summary>
            <returns>Return information about the block type</returns>
        </member>
        <member name="T:SirTetLogic.L_Block">
            <summary>
            The main L_Block class
            Contains all method for performing L_Block function
            </summary>
        </member>
        <member name="P:SirTetLogic.L_Block.MiddlePoint">
            <value>Gets middle point of block</value>
        </member>
        <member name="P:SirTetLogic.L_Block.RestPoints">
            <value>Gets table contains of rest of points excluding middle point</value>
        </member>
        <member name="P:SirTetLogic.L_Block.RotationPose">
            <value>Gets index of actual rotation position</value>
        </member>
        <member name="M:SirTetLogic.L_Block.#ctor(System.Int32,System.Int32)">
            <summary>
            Initialize a new instance of the <see cref="T:SirTetLogic.L_Block"/> class
            </summary>
            <param name="middleX">Index of column</param>
            <param name="middleY">Index of row</param>
        </member>
        <member name="M:SirTetLogic.L_Block.Rotate">
            <summary>
            Method responsible for rotation of blocks
            </summary>
        </member>
        <member name="M:SirTetLogic.L_Block.IfBlockOutOfGridOnRotate(System.Int32)">
            <summary>
            Method responsible for checking if the block is out of the grid x after rotation
            </summary>
            <param name="gridX">Index of column</param>
            <returns>Return information about if the block after rotation is out off the grid x</returns>
        </member>
        <member name="M:SirTetLogic.L_Block.IfBlockOverrideOnRotate(System.Boolean[0:,0:])">
            <summary>
            Method responsible for checking if the block collide with used space after rotation
            </summary>
            <param name="HardLayer">Two dimensional pool Table that contains of information about state of the block</param>
            <returns>Return information about if the block after rotation collide with used space</returns>
        </member>
        <member name="M:SirTetLogic.L_Block.GetBlockType">
            <summary>
            Method responsible for getting active block type
            </summary>
            <returns>Return information about the block type</returns>
        </member>
        <member name="T:SirTetLogic.MainGameController">
            <summary>
            The main MainGameController class
            Contains all method for performing MainGameController function
            </summary>
        </member>
        <member name="M:SirTetLogic.MainGameController.#ctor(System.Windows.Shapes.Rectangle[0:,0:]@,System.Windows.Shapes.Rectangle[0:,0:]@,System.Windows.Shapes.Rectangle[0:,0:]@,System.Windows.Controls.TextBox@,System.Windows.Controls.TextBlock@,System.Windows.Controls.TextBlock@,System.Windows.Controls.TextBlock@,System.Windows.Controls.TextBlock@,System.Single,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initialize a new instance of the <see cref="T:SirTetLogic.MainGameController"/> class
            </summary>
            <param name="Grid">Variable contains reference to two dimensional table contains canvas elements</param>
            <param name="NextBlockGrid">Variable contains reference to two dimensional table contains canvas elements</param>
            <param name="HoldBlockGrid">Variable contains reference to two dimensional table contains canvas elements</param>
            <param name="PlayerNick">Variable contains reference to canvas element</param>
            <param name="ScoreText">Variable contains reference to canvas element</param>
            <param name="ComboText">Variable contains reference to canvas element</param>
            <param name="RecordText">Variable contains reference to canvas element</param>
            <param name="DestroyLinesText">Variable contains reference to canvas element</param>
            <param name="GameSpeed">Variable contains float number</param>
            <param name="BlockToPreview">Variable contains</param>
            <param name="blockGenerateX">Variable contains index of row</param>
            <param name="blockGenerateY">Variable contains index of row</param>
            <param name="sizeGridX">Variable contains number of columns</param>
            <param name="sizeGridY">Variable contains number of rows</param>
        </member>
        <member name="M:SirTetLogic.MainGameController.BlockFall(System.Int32)">
            <summary>
            Method responsible for blocks moving one row lower
            </summary>
            <param name="fallLenght">Number of how many lines should block fall</param>
        </member>
        <member name="M:SirTetLogic.MainGameController.Timer_Tick(System.Object,System.EventArgs)">
            <summary>
            Method responsible for timer
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SirTetLogic.MainGameController.MoveBlockHorizontal(System.Boolean)">
            <summary>
            Method responsible for moving blocks to left and right
            </summary>
            <param name="toLeft">Bool contains information if key to move left is pressed</param>
        </member>
        <member name="M:SirTetLogic.MainGameController.RotateBlock">
            <summary>
            Method responsible for rotation of blocks
            </summary>
        </member>
        <member name="M:SirTetLogic.MainGameController.CrateBlock">
            <summary>
            Method responsible for creating and drawing block
            </summary>
        </member>
        <member name="M:SirTetLogic.MainGameController.GenerateBlock(System.Int32,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Method for generating block
            </summary>
            <param name="BlockType">Variable contains index of block type</param>
            <param name="ifMainBlock">Variable contains a bool about the block whether it is main or not</param>
            <param name="x">Variable contains index of column. Default value = -1</param>
            <param name="y">Variable contains index of row. Default value = -1</param>
            <returns>Return generated block</returns>
        </member>
        <member name="M:SirTetLogic.MainGameController.GenerateColor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Method for generating color
            </summary>
            <param name="r">Variable contains value of red color</param>
            <param name="g">Variable contains value of green color</param>
            <param name="b">Variable contains value of blue color</param>
            <returns>Return generated color</returns>
        </member>
        <member name="M:SirTetLogic.MainGameController.DrawNextBlock(System.String,System.Windows.Media.Color,System.Int32,System.Int32,System.Int32)">
            <summary>
            Method for drawing next block
            </summary>
            <param name="blockType">Variable contains name of block</param>
            <param name="blockColor">Variable contains color of block</param>
            <param name="blockNumber">Variable contains index of block</param>
            <param name="y">Variable contains index of row. Default value = 1</param>
            <param name="x">Variable contains index of column. Default value = 1</param>
        </member>
        <member name="M:SirTetLogic.MainGameController.HoldBlock">
            <summary>
            Method responsible for holding block
            </summary>
        </member>
        <member name="M:SirTetLogic.MainGameController.GameOver">
            <summary>
            Method responsible for game over
            </summary>
        </member>
        <member name="T:SirTetLogic.Music">
            <summary>
            The main Music class
            Contains all method for performing Music function
            </summary>
        </member>
        <member name="M:SirTetLogic.Music.MainTheme(System.Int32)">
            <summary>
            Method responsible for playing music
            </summary>
            <param name="themeNum">Variable containing index of sound. Default value = 1</param>
        </member>
        <member name="M:SirTetLogic.Music.MoveSFX">
            <summary>
            Method responsible for playing sound
            </summary>
        </member>
        <member name="M:SirTetLogic.Music.RotateSFX">
            <summary>
            Method responsible for playing sound
            </summary>
        </member>
        <member name="M:SirTetLogic.Music.FallSFX">
            <summary>
            Method responsible for playing sound
            </summary>
        </member>
        <member name="M:SirTetLogic.Music.LineClearSFX">
            <summary>
            Method responsible for playing sound
            </summary>
        </member>
        <member name="M:SirTetLogic.Music.ComboSFX">
            <summary>
            Method responsible for playing sound
            </summary>
        </member>
        <member name="M:SirTetLogic.Music.GameStartSFX">
            <summary>
            Method responsible for playing sound
            </summary>
        </member>
        <member name="M:SirTetLogic.Music.GameOverSFX">
            <summary>
            Method responsible for playing sound
            </summary>
        </member>
        <member name="T:SirTetLogic.NamespaceDoc">
            <summary>
            The <see cref="N:SirTetLogic"/> namespace contains logic for SirTet application
            </summary>
        </member>
        <member name="T:SirTetLogic.O_Block">
            <summary>
            The main O_Block class
            Contains all method for performing O_Block function
            </summary>
        </member>
        <member name="P:SirTetLogic.O_Block.MiddlePoint">
            <value>Gets middle point of block</value>
        </member>
        <member name="P:SirTetLogic.O_Block.RestPoints">
            <value>Gets table contains of rest of points excluding middle point</value>
        </member>
        <member name="P:SirTetLogic.O_Block.RotationPose">
            <value>Gets index of actual rotation position</value>
        </member>
        <member name="M:SirTetLogic.O_Block.#ctor(System.Int32,System.Int32)">
            <summary>
            Initialize a new instance of the <see cref="T:SirTetLogic.O_Block"/> class
            </summary>
            <param name="middleX">Index of column</param>
            <param name="middleY">Index of row</param>
        </member>
        <member name="M:SirTetLogic.O_Block.Rotate">
            <summary>
            Method responsible for rotation of blocks
            </summary>
        </member>
        <member name="M:SirTetLogic.O_Block.IfBlockOutOfGridOnRotate(System.Int32)">
            <summary>
            Method responsible for checking if the block is out of the grid x after rotation
            </summary>
            <param name="gridX">Index of column</param>
            <returns>Return information about if the block after rotation is out off the grid x</returns>
        </member>
        <member name="M:SirTetLogic.O_Block.IfBlockOverrideOnRotate(System.Boolean[0:,0:])">
            <summary>
            Method responsible for checking if the block collide with used space after rotation
            </summary>
            <param name="HardLayer">Two dimensional pool Table that contains of information about state of the block</param>
            <returns>Return information about if the block after rotation collide with used space</returns>
        </member>
        <member name="M:SirTetLogic.O_Block.GetBlockType">
            <summary>
            Method responsible for getting active block type
            </summary>
            <returns>Return information about the block type</returns>
        </member>
        <member name="T:SirTetLogic.Point">
            <summary>
            The main Point class
            Contains all method for performing Point function
            </summary>
        </member>
        <member name="M:SirTetLogic.Point.#ctor(System.Int32,System.Int32)">
            <summary>
            Initialize a new instance of the <see cref="T:SirTetLogic.Point"/> class
            </summary>
            <param name="X">Index of column</param>
            <param name="Y">Index of row</param>
        </member>
        <member name="M:SirTetLogic.Point.Get">
            <summary>
            Method responsible for getting coordinates of point
            </summary>
            <returns>Returns table containing coordinates of point</returns>
        </member>
        <member name="M:SirTetLogic.Point.Set(System.Int32,System.Int32)">
            <summary>
            Method responsible for setting coordinates of point
            </summary>
            <param name="X">Index of column</param>
            <param name="Y">Index of row</param>
        </member>
        <member name="T:SirTetLogic.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:SirTetLogic.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:SirTetLogic.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:SirTetLogic.Properties.Resources.fall">
            <summary>
              Looks up a localized resource of type System.IO.UnmanagedMemoryStream similar to System.IO.MemoryStream.
            </summary>
        </member>
        <member name="P:SirTetLogic.Properties.Resources.gameover">
            <summary>
              Looks up a localized resource of type System.IO.UnmanagedMemoryStream similar to System.IO.MemoryStream.
            </summary>
        </member>
        <member name="P:SirTetLogic.Properties.Resources.line">
            <summary>
              Looks up a localized resource of type System.IO.UnmanagedMemoryStream similar to System.IO.MemoryStream.
            </summary>
        </member>
        <member name="P:SirTetLogic.Properties.Resources.music1">
            <summary>
              Looks up a localized resource of type System.IO.UnmanagedMemoryStream similar to System.IO.MemoryStream.
            </summary>
        </member>
        <member name="P:SirTetLogic.Properties.Resources.music2">
            <summary>
              Looks up a localized resource of type System.IO.UnmanagedMemoryStream similar to System.IO.MemoryStream.
            </summary>
        </member>
        <member name="P:SirTetLogic.Properties.Resources.NES_Clear">
            <summary>
              Looks up a localized resource of type System.IO.UnmanagedMemoryStream similar to System.IO.MemoryStream.
            </summary>
        </member>
        <member name="P:SirTetLogic.Properties.Resources.pause">
            <summary>
              Looks up a localized resource of type System.IO.UnmanagedMemoryStream similar to System.IO.MemoryStream.
            </summary>
        </member>
        <member name="P:SirTetLogic.Properties.Resources.rotate">
            <summary>
              Looks up a localized resource of type System.IO.UnmanagedMemoryStream similar to System.IO.MemoryStream.
            </summary>
        </member>
        <member name="P:SirTetLogic.Properties.Resources.select">
            <summary>
              Looks up a localized resource of type System.IO.UnmanagedMemoryStream similar to System.IO.MemoryStream.
            </summary>
        </member>
        <member name="P:SirTetLogic.Properties.Resources.slow_hit">
            <summary>
              Looks up a localized resource of type System.IO.UnmanagedMemoryStream similar to System.IO.MemoryStream.
            </summary>
        </member>
        <member name="T:SirTetLogic.SaveScore">
            <summary>
            The main SaveScore class
            Contains all method for performing SaveScore function
            </summary>
        </member>
        <member name="M:SirTetLogic.SaveScore.EncryptString(System.String,System.String)">
            <summary>
            Method responsible for encrypting
            </summary>
            <param name="input">Variable containing content to encrypt</param>
            <param name="key">Variable containing encrypt key</param>
            <returns></returns>
        </member>
        <member name="M:SirTetLogic.SaveScore.DecryptString(System.String,System.String)">
            <summary>
            Method responsible for decrypting
            </summary>
            <param name="input">Variable containing content to decrypt</param>
            <param name="key">Variable containing decrypt key</param>
            <returns></returns>
        </member>
        <member name="M:SirTetLogic.SaveScore.SaveFile(System.String[],System.String,System.String)">
            <summary>
            Method responsible for saving to file
            </summary>
            <param name="value">Table containing stuff to save</param>
            <param name="dirPath">Variable containing save path</param>
            <param name="fileName">Variable containing file name</param>
        </member>
        <member name="M:SirTetLogic.SaveScore.ReadFile(System.String)">
            <summary>
            Method for reading file
            </summary>
            <param name="path">Variable contains path to file</param>
            <returns>Return table containing read content of file </returns>
        </member>
        <member name="T:SirTetLogic.Score">
            <summary>
            The main Score class
            Contains all method for performing Score function
            </summary>
        </member>
        <member name="M:SirTetLogic.Score.#ctor(System.Windows.Controls.TextBlock@,System.Windows.Controls.TextBlock@,System.Windows.Controls.TextBlock@,System.Windows.Controls.TextBlock@,System.Windows.Controls.TextBox@)">
            <summary>
            Initialize a new instance of the <see cref="T:SirTetLogic.Score"/> class
            </summary>
            <param name="ScoreText">Variable contains reference to cavas element</param>
            <param name="ComboText">Variable contains reference to cavas element</param>
            <param name="RecordText">Variable contains reference to cavas element</param>
            <param name="DestroyLinesText">Variable contains reference to cavas element</param>
            <param name="PlayerNick">Variable contains reference to cavas element</param>
        </member>
        <member name="M:SirTetLogic.Score.SetText">
            <summary>
            Method responsible for displaying texts
            </summary>
        </member>
        <member name="M:SirTetLogic.Score.GetMainScore">
            <summary>
            Method responsible for getting mains score
            </summary>
            <returns>Information about main score</returns>
        </member>
        <member name="M:SirTetLogic.Score.AddMainScore(System.Int32)">
            <summary>
            Method responsible for adding score
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:SirTetLogic.Score.GetLineCombo">
            <summary>
            Method responsible for getting combo
            </summary>
            <returns>Return information about line combo</returns>
        </member>
        <member name="M:SirTetLogic.Score.AddLineCombo(System.Int32)">
            <summary>
            Method responsible for adding line combo
            </summary>
            <param name="value">Variable containing value of points</param>
        </member>
        <member name="M:SirTetLogic.Score.AddUpLineCombo(System.Int32)">
            <summary>
            Method responsible adding line combo for more then one line
            </summary>
            <param name="comboWorth">Arable containing value of combo</param>
        </member>
        <member name="M:SirTetLogic.Score.AddDestroyLineScore(System.Int32)">
            <summary>
            Method responsible for adding destroyed lines 
            </summary>
            <param name="value">Variable containing value of destroyed lines</param>
        </member>
        <member name="M:SirTetLogic.Score.DrawRecords(System.Windows.Controls.TextBlock@)">
            <summary>
            Method for displaying records scores form file
            </summary>
            <param name="RecordText">Variable contains reference to canvas element</param>
        </member>
        <member name="M:SirTetLogic.Score.DrawRecords">
            <summary>
            Method for displaying records scores from file
            </summary>
        </member>
        <member name="M:SirTetLogic.Score.SetRecords">
            <summary>
            Method for saving records scores to file
            </summary>
        </member>
        <member name="T:SirTetLogic.S_Block">
            <summary>
            The main S_Block class
            Contains all method for performing S_Block function
            </summary>
        </member>
        <member name="P:SirTetLogic.S_Block.MiddlePoint">
            <value>Gets middle point of block</value>
        </member>
        <member name="P:SirTetLogic.S_Block.RestPoints">
            <value>Gets table contains of rest of points excluding middle point</value>
        </member>
        <member name="P:SirTetLogic.S_Block.RotationPose">
            <value>Gets index of actual rotation position</value>
        </member>
        <member name="M:SirTetLogic.S_Block.#ctor(System.Int32,System.Int32)">
            <summary>
            Initialize a new instance of the <see cref="T:SirTetLogic.S_Block"/> class
            </summary>
            <param name="middleX">Index of column</param>
            <param name="middleY">Index of row</param>
        </member>
        <member name="M:SirTetLogic.S_Block.Rotate">
            <summary>
            Method responsible for rotation of blocks
            </summary>
        </member>
        <member name="M:SirTetLogic.S_Block.IfBlockOutOfGridOnRotate(System.Int32)">
            <summary>
            Method responsible for checking if the block is out of the grid x after rotation
            </summary>
            <param name="gridX">Index of column</param>
            <returns>Return information about if the block after rotation is out off the grid x</returns>
        </member>
        <member name="M:SirTetLogic.S_Block.IfBlockOverrideOnRotate(System.Boolean[0:,0:])">
            <summary>
            Method responsible for checking if the block collide with used space after rotation
            </summary>
            <param name="HardLayer">Two dimensional pool Table that contains of information about state of the block</param>
            <returns>Return information about if the block after rotation collide with used space</returns>
        </member>
        <member name="M:SirTetLogic.S_Block.GetBlockType">
            <summary>
            Method responsible for getting active block type
            </summary>
            <returns>Return information about the block type</returns>
        </member>
        <member name="T:SirTetLogic.T_Block">
            <summary>
            The main T_Block class
            Contains all method for performing T_Block function
            </summary>
        </member>
        <member name="P:SirTetLogic.T_Block.MiddlePoint">
            <value>Gets middle point of block</value>
        </member>
        <member name="P:SirTetLogic.T_Block.RestPoints">
            <value>Gets table contains of rest of points excluding middle point</value>
        </member>
        <member name="P:SirTetLogic.T_Block.RotationPose">
            <value>Gets index of actual rotation position</value>
        </member>
        <member name="M:SirTetLogic.T_Block.#ctor(System.Int32,System.Int32)">
            <summary>
            Initialize a new instance of the <see cref="T:SirTetLogic.T_Block"/> class
            </summary>
            <param name="middleX">Index of column</param>
            <param name="middleY">Index of row</param>
        </member>
        <member name="M:SirTetLogic.T_Block.Rotate">
            <summary>
            Method responsible for rotation of blocks
            </summary>
        </member>
        <member name="M:SirTetLogic.T_Block.IfBlockOutOfGridOnRotate(System.Int32)">
            <summary>
            Method responsible for checking if the block is out of the grid x after rotation
            </summary>
            <param name="gridX">Index of column</param>
            <returns>Return information about if the block after rotation is out off the grid x</returns>
        </member>
        <member name="M:SirTetLogic.T_Block.IfBlockOverrideOnRotate(System.Boolean[0:,0:])">
            <summary>
            Method responsible for checking if the block collide with used space after rotation
            </summary>
            <param name="HardLayer">Two dimensional pool Table that contains of information about state of the block</param>
            <returns>Return information about if the block after rotation collide with used space</returns>
        </member>
        <member name="M:SirTetLogic.T_Block.GetBlockType">
            <summary>
            Method responsible for getting active block type
            </summary>
            <returns>Return information about the block type</returns>
        </member>
        <member name="T:SirTetLogic.Z_Block">
            <summary>
            The main Z_Block class
            Contains all method for performing Z_Block function
            </summary>
        </member>
        <member name="P:SirTetLogic.Z_Block.MiddlePoint">
            <value>Gets middle point of block</value>
        </member>
        <member name="P:SirTetLogic.Z_Block.RestPoints">
            <value>Gets table contains of rest of points excluding middle point</value>
        </member>
        <member name="P:SirTetLogic.Z_Block.RotationPose">
            <value>Gets index of actual rotation position</value>
        </member>
        <member name="M:SirTetLogic.Z_Block.#ctor(System.Int32,System.Int32)">
            <summary>
            Initialize a new instance of the <see cref="T:SirTetLogic.Z_Block"/> class
            </summary>
            <param name="middleX">Index of column</param>
            <param name="middleY">Index of row</param>
        </member>
        <member name="M:SirTetLogic.Z_Block.Rotate">
            <summary>
            Method responsible for rotation of blocks
            </summary>
        </member>
        <member name="M:SirTetLogic.Z_Block.IfBlockOutOfGridOnRotate(System.Int32)">
            <summary>
            Method responsible for checking if the block is out of the grid x after rotation
            </summary>
            <param name="gridX">Index of column</param>
            <returns>Return information about if the block after rotation is out off the grid x</returns>
        </member>
        <member name="M:SirTetLogic.Z_Block.IfBlockOverrideOnRotate(System.Boolean[0:,0:])">
            <summary>
            Method responsible for checking if the block collide with used space after rotation
            </summary>
            <param name="HardLayer">Two dimensional pool Table that contains of information about state of the block</param>
            <returns>Return information about if the block after rotation collide with used space</returns>
        </member>
        <member name="M:SirTetLogic.Z_Block.GetBlockType">
            <summary>
            Method responsible for getting active block type
            </summary>
            <returns>Return information about the block type</returns>
        </member>
    </members>
</doc>
